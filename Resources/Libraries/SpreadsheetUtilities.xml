<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetUtilities</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:SpreadsheetUtilities.DependencyGraph" -->
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Creates an empty DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            The number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            The size of dependees(s).
            This property is an example of an indexer.  If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
            It should return the size of dependees("a")
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether dependents(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether dependees(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerates dependents(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerates dependees(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               t depends on s
            
             </summary>
             <param name="s"> s must be evaluated first. T depends on S</param>
             <param name="t"> t cannot be evaluated until s is</param>        /// 
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (s,r).  Then, for each
            t in newDependents, adds the ordered pair (s,t).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s).  Then, for each 
            t in newDependees, adds the ordered pair (t,s).
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.DependencyGraph.DGNode">
            <summary>
            A inner class that is used to keep track of the dependents and the dependees of each node.
            This class only stores the name for other nodes and not the actual references to those node objects.
            Thus, you must keep track of the other nodes in some other data structure.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DGNode.getDependees">
            <summary>
            Returns a HashSet of the dependees of this node. This does not return the actual HashSet object of the node.
            </summary>
            <returns>A copied HashSet of the dependees of this node.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DGNode.getDependeesSize">
            <summary>
            For performance reasons as to not require a full copy to check the count,
            provide a function solely to provide the count of dependees of this node.
            </summary>
            <returns>The number of dependees this node has.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DGNode.getDependents">
            <summary>
            Returns a HashSet of dependents of this node. This does not return the actual HashSet object of the node.
            </summary>
            <returns>A copied HashSet of the dependents of this node.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DGNode.getDependentsSize">
            <summary>
            For performance reasons as to not require a full copy to check the count,
            provide a function solely to provide the count of dependents of this node.
            </summary>
            <returns>The number of dependents this node has.</returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DGNode.addDependee(System.String)">
            <summary>
            If the dependee does not already exist in the list, add it to the list of dependees.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DGNode.addDependent(System.String)">
            <summary>
            If the dependent does not already exist in the list, add it to the list of dependents.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DGNode.removeDependee(System.String)">
            <summary>
            If the dependee exists in the list, then remove that dependee.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DGNode.removeDependent(System.String)">
            <summary>
            If the dependent exist in the list, then remove that dependent.
            </summary>
            <param name="s"></param>
        </member>
    </members>
</doc>
